package org.usfirst.frc.team360.robot.subsystems;

import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc.team360.robot.RobotMap;

import com.kauailabs.navx.frc.AHRS;
/**
 * The Pivot subsystem contains the Van-door motor and the pot for PID control
 * of angle of the pivot and claw.
 */
public class PIDSubsystem extends Subsystem {
	
	AHRS ahrs = RobotMap.ahrs;
	
	VictorSP motorR1 = RobotMap.motorR1; 
	VictorSP motorR2 = RobotMap.motorR2; 
	VictorSP motorL1 = RobotMap.motorL1; 
	VictorSP motorL2 = RobotMap.motorL2; 
	RobotDrive myRobot; 
	PIDController turnController;
	
	
	public void PIDInput(){
		
		
	}
	public void init(){
	   myRobot = new RobotDrive(0, 1);
	     // myRobot.setExpiration(0.1);
	    //  stick = new Joystick(0);
	      try {
	          /* Communicate w/navX-MXP via the MXP SPI Bus.                                     */
	          /* Alternatively:  I2C.Port.kMXP, SerialPort.Port.kMXP or SerialPort.Port.kUSB     */
	          /* See http://navx-mxp.kauailabs.com/guidance/selecting-an-interface/ for details. */
	          ahrs = new AHRS(SPI.Port.kMXP); 
	      } catch (RuntimeException ex ) {
	          DriverStation.reportError("Error instantiating navX-MXP:  " + ex.getMessage(), true);
	      }
	      turnController = new PIDController(kP, kI, kD, kF, ahrs, this);
	      turnController.setInputRange(-180.0f,  180.0f);
	      turnController.setOutputRange(-1.0, 1.0);
	      turnController.setAbsoluteTolerance(kToleranceDegrees);
	      turnController.setContinuous(true);
	
	}
	
	public void execute(){
		 myRobot.setSafetyEnabled(false);
	      myRobot.drive(0.0, 0.0);    // stop robot
	      Timer.delay(2.0);		    //    for 2 seconds
	      myRobot.drive(0.0, 0.0);	// stop robot
	}
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    
    }

		
	
	void PIDOutput(){
		//motorR1.set();  
		
	}
	
	
	
}

