
package org.usfirst.frc.team360.robot;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.command.WaitCommand;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.vision.USBCamera;

import org.usfirst.frc.team360.robot.commands.*;
import org.usfirst.frc.team360.robot.subsystems.*;

import com.ni.vision.NIVision;
import com.ni.vision.NIVision.Image;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

	// ENCODERS ON COMP BOT ARE 21.16 ticks per In
	// ENCODER ON PRACTICE BOT ARE 21.12 but we will default to COMP BOT
	public static DriveTrain drivetrain;
	public static SuperShifter supershifter;
	public static Pneumatics pneumatics;
	public static Catapult catapult;
	public static IntakeArms intakearm;
	public static IntakeMotor intakemotor;
	public static NavX navx;
	public static NavXPIDSubsystem navxpidsubsystem;
	public static RPIServer rpiserver;

	Command cameraaim;
	Command joysticktankdrive;
	Command pressurize;
	Command printrpidata;
	Command shiftup;
	Command shiftdown;
	Command catapultup;
	Command catapultdown;
	Command intakearmup;
	Command intakearmdown;
	Command intakemotors;
	Command printnavxangle;
	Command resetencs;
	Command getencs;
	Command navxpid;
	Command driveencs;
	Command autoCommand;
	Command pidnav;
	Command rpiangle;
	Command rpidistance;
	Command drivestraightpid;
	Command getcatapultposition;
	
	public static enum AutoMode1 {NONE, BREACH, SHOOT, BREACHANDSHOOT, TEST};
	public static enum AutoMode2 {LOWBAR, MOAT, RAMPARTS, ROCKWALL, ROUGHTERRAIN};
	public static enum AutoMode3 {POSITION1, POSITION2, POSITION3, POSITION4, POSITION5};
	public static enum AutoMode4 {RIGHT, CENTER, LEFT};
	Integer autoChoice1;
	static AutoMode1 automode1;
	static AutoMode2 automode2;
	static AutoMode3 automode3;
	static AutoMode4 automode4;
	SendableChooser auto1;
	SendableChooser auto2;
	SendableChooser auto3;
	SendableChooser auto4;


	
	public static OI oi;
	public Image frame;
	
	/**
	 * This func tion is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	public void robotInit() {
		// instantiate the command used for the autonomous period
		
		try {
			RobotMap.dangerZone = false;
			
			frame = NIVision.imaqCreateImage(NIVision.ImageType.IMAGE_RGB, 0);
				
			RobotMap.back = new USBCamera("cam0");
			RobotMap.front = new USBCamera("cam1");
			
			RobotMap.back.startCapture();
			RobotMap.cam = RobotMap.back;
			RobotMap.frontCam = false;
			
			supershifter = new SuperShifter();
			pneumatics = new Pneumatics();
			drivetrain = new DriveTrain();
			catapult = new Catapult();
			intakearm = new IntakeArms();
			intakemotor = new IntakeMotor();
			navx = new NavX();
			navxpidsubsystem = new NavXPIDSubsystem();
			rpiserver = new RPIServer();
			pidnav = new PIdNav(90);
			joysticktankdrive = new JoystickTankDrive();
			pressurize = new Pressurize();
			shiftup = new ShiftUp();
			shiftdown = new ShiftDown();
			catapultdown = new CatapultDown();
			catapultup = new CatapultUp();
			intakearmdown = new IntakeArmDown();
			cameraaim = new CameraAim();
			// navxpid = new NavXPID(270);
			intakearmup = new IntakeArmUp();
			resetencs = new ResetEncs();
			printnavxangle = new PrintNavXAngle();
			intakemotors = new IntakeMotors();
			getencs = new getEncs();
			printrpidata = new PrintRPIData();
			getcatapultposition = new GetCatapultPosition();
			// driveencs = new DriveEncs(1850, 1);
			rpiangle = new RPIAngle();
			rpidistance = new RPIDistance();
			oi = new OI();
			
		} catch (Exception e) {
			System.out.println(e);
		}
	}

	public void disabledPeriodic() {
		try {
			RobotMap.cam.getImage(frame);
			CameraServer.getInstance().setImage(frame);
		} catch (Exception e) {
			System.out.println(e);
		}
		Scheduler.getInstance().run();
		//if (autoChoice != null) {
			// autoCommand.start();
		//	SmartDashboard.putNumber("auto choice", autoChoice);
		/*AutoMode1 autoChoice = (AutoMode1) auto1.getSelected();
		Integer autoSB = 0;
		auto2 = new SendableChooser();
		auto3 = new SendableChooser();
		auto4 = new SendableChooser();
			switch(autoChoice){
			default:
				break;
			case NONE:
			//	auto2 = new SendableChooser();
				auto2.addDefault("Literally Nothing", null);
				auto3.addDefault("Literally Nothing", null);
				SmartDashboard.putData("auto type", auto2);
				break;
			case BREACH:
			//	auto2 = new SendableChooser();
				auto3.addDefault("Literally Nothing", null);
				auto2.addDefault("breach low bar", new AutoBreachLowBar());
				auto2.addObject("breach moat", new AutoBreachMoat());
				auto2.addObject("breach ramparts", new AutoBreachRamparts());
				auto2.addObject("breach rock wall", new AutoBreachRockWall());
				auto2.addObject("breach rough terrain", new AutoBreachRoughTerrain());
				SmartDashboard.putData("auto type", auto2);
				break;
			case SHOOT:
			//	auto2 = new SendableChooser();
				auto3.addDefault("Literally Nothing", null);
				auto2.addDefault("shoot from spy box", new AutoBreachLowBar());
				SmartDashboard.putData("auto type", auto2);
				break;
			case BREACHANDSHOOT:
			//	auto2 = new SendableChooser();
				auto3.addDefault("Literally Nothing", null);
				auto2.addDefault("breach low bar", automode2.LOWBAR);
				auto2.addObject("breach moat", automode2.MOAT);
				auto2.addObject("breach ramparts", automode2.RAMPARTS);
				auto2.addObject("breach rock wall", automode2.ROCKWALL);
				auto2.addObject("breach rough terrain", automode2.ROUGHTERRAIN);
				SmartDashboard.putData("auto type", auto2);
				AutoMode2 autoChoice2 = (AutoMode2) auto2.getSelected();
				switch(autoChoice2){
					case LOWBAR:
						auto3.addDefault("position 1", automode3.POSITION1);
						SmartDashboard.putData("auto position", auto3);
						AutoMode3 autoChoice3 = (AutoMode3) auto3.getSelected();
						switch(autoChoice3){
							case POSITION1:
								auto4.addDefault("position 1", new AutoLowBarPosition1CenterFace());
								auto4.addObject("position 1", new AutoLowBarPosition1LeftFace());
							break;
						}
					break;
					case MOAT:
						auto3.addDefault("position 2", automode3.POSITION2);
						auto3.addObject("position 3", automode3.POSITION3);
						auto3.addObject("position 4", automode3.POSITION4);
						auto3.addObject("position 5", automode3.POSITION5);
						SmartDashboard.putData("auto position", auto3);

						AutoMode3 autoChoice31 = (AutoMode3) auto3.getSelected();
						switch(autoChoice31){
							case POSITION2:
								auto4.addDefault("position 1", new AutoMoatPosition2CenterFace());
								auto4.addObject("position 1", new AutoMoatPosition2LeftFace());
							break;
							case POSITION3:
								auto4.addDefault("position 1", new AutoMoatPosition3CenterFace());
							break;
							case POSITION4:
								auto4.addDefault("position 1", new AutoMoatPosition4CenterFace());
								auto4.addObject("position 1", new AutoMoatPosition4RightFace());
								break;
							case POSITION5:
								auto4.addDefault("position 1", new AutoMoatPosition5CenterFace());
								auto4.addObject("position 1", new AutoMoatPosition5RightFace());
							break;
						}

					break;
					case RAMPARTS:
						auto3.addDefault("position 2", automode3.POSITION2);
						auto3.addObject("position 3", automode3.POSITION3);
						auto3.addObject("position 4", automode3.POSITION4);
						auto3.addObject("position 5", automode3.POSITION5);
						SmartDashboard.putData("auto position", auto3);

						AutoMode3 autoChoice311 = (AutoMode3) auto3.getSelected();
						switch(autoChoice311){
						case POSITION2:
							auto4.addDefault("center face", new AutoRampartsPosition2CenterFace());
							auto4.addObject("left face", new AutoRampartsPosition2LeftFace());
						break;
						case POSITION3:
							auto4.addDefault("center face", new AutoRampartsPosition3CenterFace());
						break;
						case POSITION4:
							auto4.addDefault("center face", new AutoRampartsPosition4CenterFace());
							auto4.addObject("right face", new AutoRampartsPosition4RightFace());
							break;
						case POSITION5:
							auto4.addDefault("center face", new AutoRampartsPosition5CenterFace());
							auto4.addObject("right face", new AutoRampartsPosition5RightFace());
						break;
					}
					break;
					case ROCKWALL:
						auto3.addDefault("position 2", automode3.POSITION2);
						auto3.addObject("position 3", automode3.POSITION3);
						auto3.addObject("position 4", automode3.POSITION4);
						auto3.addObject("position 5", automode3.POSITION5);
						SmartDashboard.putData("auto position", auto3);

						AutoMode3 autoChoice3111 = (AutoMode3) auto3.getSelected();
						switch(autoChoice3111){
						case POSITION2:
							auto4.addDefault("center face", new AutoRockWallPosition2CenterFace());
							auto4.addObject("right face", new AutoRockWallPosition2LeftFace());
						break;
						case POSITION3:
							auto4.addDefault("center face", new AutoRockWallPosition3CenterFace());
						break;
						case POSITION4:
							auto4.addDefault("center face", new AutoRockWallPosition4CenterFace());
							auto4.addObject("right face", new AutoRockWallPosition4RightFace());
							break;
						case POSITION5:
							auto4.addDefault("center face", new AutoRockWallPosition5CenterFace());
							auto4.addObject("right face", new AutoRockWallPosition5RightFace());
						break;
					}
					break;
					case ROUGHTERRAIN:
						auto3.addDefault("position 2", automode3.POSITION2);
						auto3.addObject("position 3", automode3.POSITION3);
						auto3.addObject("position 4", automode3.POSITION4);
						auto3.addObject("position 5", automode3.POSITION5);
						SmartDashboard.putData("auto position", auto3);

						AutoMode3 autoChoice31111 = (AutoMode3) auto3.getSelected();
						switch(autoChoice31111){
						case POSITION2:
							auto4.addDefault("center face", new AutoRoughTerrainPosition2CenterFace());
							auto4.addDefault("center face", new AutoRoughTerrainPosition2LeftFace());
						break;
						case POSITION3:
							auto4.addDefault("center face", new AutoRoughTerrainPosition3CenterFace());
						break;
						case POSITION4:
							auto4.addDefault("center face", new AutoRoughTerrainPosition4CenterFace());
							auto4.addDefault("center face", new AutoRoughTerrainPosition4RightFace());
							break;
						case POSITION5:
							auto4.addDefault("center face", new AutoRoughTerrainPosition5CenterFace());
							auto4.addDefault("center face", new AutoRoughTerrainPosition5RightFace());
						break;

					}
						SmartDashboard.putData("auto type", auto4);
					break;
				}
				AutoMode3 autoChoice3 = (AutoMode3) auto3.getSelected();
				break;
			case TEST:
				auto3.addDefault("Literally Nothing", null);
				auto2 = new SendableChooser();
				auto2.addDefault("breach low bar", new AutoRockWallPosition3CenterFace());
				SmartDashboard.putData("auto type", auto2);
				break;
			}
	*/
			
	//	}
	}

	double setpoint = 0;
	double error = 0;

	public void autonomousInit() {

		//drivestraightpid = new DriveStraightPID(.8, 180, 2582);
		// schedule the autonomous command (example)
	//	cameraaim.start();
		resetencs.start();
		navx.reset();
	//	pidnav = new PIdNav(135);
		Timer.delay(.25);
		drivetrain.resetREnc();
		//pidnav.start();
	//	drivestraightpid.start();
		// turnController.enable();
		// pidnav.start();
		// turnController.enable();
		// navxpid.start();
		rpiangle.start();
		getencs.start();
	//	if(auto2.getSelected() != null){
			//autoCommand = (Command)auto2.getSelected();
	//	}
		autoCommand = new AutoBreachBangBang();
		if(autoCommand != null){
			autoCommand.start();
		}
		//drivestraightpid.start();
		
	}
	

	/**
	 * This function is called periodically during autonomous
	 */
	public void autonomousPeriodic() {
		Scheduler.getInstance().run();
		// rpiangle.start();
		// navxpid.start();
		//pidnav.start();

		//printnavxangle.start();
	}

	public void teleopInit() {
		// This makes sure that the autonomous stops running when
		// teleop starts running. If you want the autonomous to
		// continue until interrupted by another command, remove
		// this line or comment it out.
		if (autoCommand != null) {
			 autoCommand.cancel();
		}
		RobotMap.dangerZone = false;
		resetencs.start();
		navx.reset();
		rpiangle.start();
		rpidistance.start();
		printrpidata.start();
		getencs.start();
	}

	/**
	 * This function is called when the disabled button is hit. You can use it
	 * to reset subsystems before shutting down.
	 */
	public void disabledInit() {
		autoChoice1 = 0;
		auto1 = new SendableChooser();
		auto1.addDefault("No Auto", automode1.NONE);
		auto1.addObject("Breach Auto", automode1.BREACH);
		auto1.addObject("Shoot Auto", automode1.SHOOT);
		auto1.addObject("Breach and Shoot Auto", automode1.BREACHANDSHOOT);
		auto1.addObject("Test", automode1.TEST);
		SmartDashboard.putData("auto mode", auto1);
		rpiangle.start();
		rpidistance.start();
		printrpidata.start();
	}

	/**
	 * This function is called periodically during operator control
	 */
	public void teleopPeriodic() {

		try {
			RobotMap.cam.getImage(frame);
			CameraServer.getInstance().setImage(frame);
			Scheduler.getInstance().run();
			// navxpid.start();
			SmartDashboard.putNumber("left", -OI.joyL.getRawAxis(1));
			SmartDashboard.putNumber("right", -OI.joyR.getRawAxis(1));
			pressurize.start();
			printnavxangle.start();
			getencs.start();
			printrpidata.start();
			getcatapultposition.start();
		} catch (Exception e) {
			System.out.println(e);
		}
	}
	/**
	 * This function is called periodically during test mode
	 */
	public void testPeriodic() {
		LiveWindow.run();
	}
}